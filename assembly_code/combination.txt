                lw    0    1    n           ; Load n from memory
                lw    0    2    r           ; Load r from memory
                lw    0    3    result      ; Initialize result register
                lw    0    4    stack       ; Initialize stack pointer
                lw    0    5    ret_addr    ; Initialize return address register
                jalr  6    7                ; Call combination(n, r)
                halt
combination     beq   1    0    base_case_1 ; If n == 0, return 1
                beq   1    2    base_case_2 ; If n == r, return 1
                add   4    3    4           ; Push return address on stack
                add   4    4    4           ; Increment stack pointer
                add   1    2    1           ; n-1
                add   1    2    5           ; n-1 in reg5 (temporary storage)
                jalr  6    7                ; Recursive call (combination(n-1, r))
                add   1    0    1           ; Decrement n
                add   4    3    4           ; Pop return address from stack
                add   4    4    4           ; Decrement stack pointer
                add   3    3    3           ; Add the result from recursive call
                add   5    0    5           ; Restore n-1 from reg5
                add   2    0    2           ; Decrement r
                add   2    5    6           ; r-1 in reg6 (temporary storage)
                jalr  6    7                ; Recursive call (combination(n-1, r-1))
                add   4    3    4           ; Pop return address from stack
                add   4    4    4           ; Decrement stack pointer
                add   3    3    3           ; Add the result from the second recursive call
                jalr  7    4                ; Return
base_case_1     add   3    0    3           ; n == 0, return 1
                add   1    0    1           ; Decrement n
                jalr  7    5                ; Return
base_case_2     add   3    0    3           ; n == r, return 1
                add   2    0    2           ; Decrement r
                jalr  7    5                ; Return
end             halt
n               .fill 7                     ; Input n
r               .fill 3                     ; Input r
result          .fill 0                     ; Result variable
stack           .fill 0                     ; Stack pointer (initialized to 0)
ret_addr        .fill 0                     ; Return address register